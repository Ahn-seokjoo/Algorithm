from collections import deque
n, l, r = map(int,input().split())
graph = []

for i in range(n):
  graph.append(list(map(int,input().split())))
  
#상 하 좌 우
dx = [-1,0,1,0]
dy = [0,-1,0,1]

result = 0

def process(x,y,index):
  united = []
  united.append((x,y))
  #BFS 이용한 큐 자료 구조 정의
  q = deque()
  q.append((x,y))
  union[x][y] = index
  summary = graph[x][y]
  count = 1

  while q:
    x,y = q.popleft()
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]

      if 0 <= nx <n and 0 <= ny<n and union[nx][ny] == -1:
        #옆의 나라와 차이가 l~r이면
        if l <= abs(graph[nx][ny]-graph[x][y]) <= r:
          q.append((nx,ny))
          #연합에 추가
          union[nx][ny] = index
          summary += graph[nx][ny]
          count += 1
          united.append((nx,ny))

  for i, j in united:
    graph[i][j] = summary//count
  return count

total_count = 0
# 인구 이동을 못할 때 까지
while True:
  union = [[-1] * n for _ in range(n)]
  index = 0
  for i in range(n):
    for j in range(n):
      if union[i][j] == -1: #해당 나라가 아직 안 처리 됐다면
        process(i,j,index)
        index += 1
  #인구 이동 끝났다면
  if index == n* n:
    break
  total_count += 1
  # 총 인구 이동 횟수 출력
print(total_count)
