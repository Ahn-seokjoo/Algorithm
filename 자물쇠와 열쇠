def roatate_a_matrix_90_degree(a):
    n = len(a) # 행 길이 계산
    m = len(a[0]) # 열 길이 계산
    result = [[0]* n for _ in range(m)]
    for i in range(n):
        for j in range(m):
            result[j][n-i-1] = a[i][j]
    return result
# 자물쇠 중간 합이 1인지 확인.
def check(new_lock):
    lock_length = len(new_lock) // 3
    for i in range(lock_length,lock_length * 2):
        for j in range(lock_length, lock_length * 2):
            if new_lock[i][j] != 1:
                return False
    return True
def solution(key, lock):
    n = len(lock)
    m = len(key)
    #자물쇠 크기 3배로
    new_lock = [[0]*(n*3) for _ in range(n*3)]
    for i in range(n):
        for j in range(n):
            new_lock[i+n][j+n] = lock[i][j]
    for rotation in range(4):
        key = roatate_a_matrix_90_degree(key)#열쇠 90도 회전
        for x in range(n*2):
            for y in range(n*2):
                #자물쇠에 열쇠를 끼워 넣기
                for i in range(m):
                    for j in range(m):
                        new_lock[x + i][y + j] += key[i][j]
                if check(new_lock) == True:
                    return True
                # 위의 true가 안되는 경우 방금 한 것 다시 빼주기
                for i in range(m):
                    for j in range(m):
                        new_lock[x + i][y + j] -= key[i][j]
    return False
               
    # for문을 5중으로 씀... 좀더 자세하게 볼 것
