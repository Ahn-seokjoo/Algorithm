n, m = map(int,input().split())

graph = []
for i in range(n):
    graph.append(list(map(int,input())))
    
def dfs(x,y):
    #범위를 벗어나면 종료
    if x<=-1 or x>=n or y<=-1 or y>=m :
        return False
    #아직 방문하지 않은 노드라면
    if graph[x][y] == 0 :
        #해당 노드 방문
        graph[x][y] = 1
        #상하좌우 재귀로 호출
        dfs(x-1,y)
        dfs(x,y-1)
        dfs(x+1,y)
        dfs(x,y+1)##방문처리만 해주지 count에는 영향 없음
        return True
    return False
    
#모든 위치 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
        #dfs 수행, 첫 0인곳으로 갯수를 올림
        if dfs(i,j)==True:
            result +=1
        
print(result)

###2회차
n, m = map(int,input().split())

graph = []
for i in range(n):
  graph.append(list(map(int,input().split())))

count = 0

def dfs(x,y):
  if x <= -1 or x >= n or y <= -1 or y >= m:
    return False
  if graph[x][y] == 0:
    graph[x][y] = 1

    dfs(x-1,y)
    dfs(x,y-1)
    dfs(x+1,y)
    dfs(x,y+1)
    return True
  return False
for i in range(n):
  for j in range(m):
    #현재 위치에서 dfs
    if dfs(i,j) == True:
      count += 1

print(count)

###가까운곳부터 방문하여 bfs라고 생각했는데, stack으로 풀어야 하니 dfs가 맞는 것 같다. 2회차지만서도 어려움..
