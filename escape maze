from collections import deque

n , m = map(int,input().split())
graph = []
#상하좌우
dx = [-1,1,0,0]
dy = [0,0,-1,1]

for i in range(n):
    graph.append(list(map(int,input())))

def bfs(x,y):
    queue = deque()
    queue.append((x,y))
    #큐가 빌 때 까지
    while queue:
        x,y = queue.popleft()
        #네 방향으로 위치 확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            #공간 벗어나면 아웃
            if nx<0 or ny <0 or nx>=n or ny>=m :
                continue
            #벽인경우
            if graph[nx][ny] == 0:
                continue
            #해당 노드를 처음 방문하는 경우만 최단거리
            if graph[nx][ny] == 1:
                graph[nx][ny] = graph[x][y] + 1
                queue.append((nx,ny))
    #가장 오른쪽 아래까지 최단거리 반환        
    return graph[n-1][m-1]
    
print(bfs(0,0))
  
        
